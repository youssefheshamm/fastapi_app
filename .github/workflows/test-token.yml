name: Semantic Release

on:
  push:
    branches: [ main ]

jobs:
  check-and-release:
    name: Check and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Semantic Release
        run: pip install python-semantic-release

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Try automated semantic release
        id: try_semantic
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Try to run semantic release normally
          output=$(semantic-release publish 2>&1)
          echo "$output"
          
          if echo "$output" | grep -q "Published Release"; then
            echo "RELEASE_TYPE=semantic" >> $GITHUB_ENV
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
          else
            echo "RELEASE_TYPE=none" >> $GITHUB_ENV
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create manual release if semantic failed
        if: env.RELEASE_TYPE == 'none'
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Get latest commit message to check if it should trigger a release
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|feat!):"; then
            echo "Commit should trigger release, creating manual release..."
            
            # Get current version and increment
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Current version: $CURRENT_VERSION"
            
            # Simple version bump logic
            if echo "$COMMIT_MSG" | grep -q "^feat!:"; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1 ".0.0"}')
            elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$2=$2+1; $3=0; print $1 "." $2 "." $3}')
            else
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$3=$3+1; print $1 "." $2 "." $3}')
            fi
            
            echo "New version: $NEW_VERSION"
            
            # Create and push tag
            git tag $NEW_VERSION
            git push origin $NEW_VERSION
            
            echo "RELEASE_TYPE=manual" >> $GITHUB_ENV
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
            echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Commit does not require release"
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Set output
        run: |
          echo "new_release_published=$NEW_RELEASE" >> $GITHUB_OUTPUT
          echo "release_version=${RELEASE_VERSION:-v0.0.0}" >> $GITHUB_OUTPUT

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: check-and-release
    if: needs.check-and-release.outputs.new_release_published == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.check-and-release.outputs.release_version }}