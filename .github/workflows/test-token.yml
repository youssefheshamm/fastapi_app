name: Semantic Release

on:
  push:
    branches: [ main ]

jobs:
  check-and-release:
    name: Check and Release
    runs-on: ubuntu-latest
    
    outputs:
      should_build_docker: ${{ steps.final_output.outputs.should_build_docker }}
      docker_version: ${{ steps.final_output.outputs.docker_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Semantic Release
        run: pip install python-semantic-release

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Try automated semantic release
        id: try_semantic
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          output=$(semantic-release publish 2>&1)
          echo "$output"
          
          if echo "$output" | grep -q "Published Release"; then
            echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          else
            echo "SHOULD_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Check commit and create release if needed
        if: env.SHOULD_BUILD == 'false'
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|feat!):"; then
            echo "Creating manual release..."
            
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Current version: $CURRENT_VERSION"
            
            # Simple version bump
            if echo "$COMMIT_MSG" | grep -q "^feat!:"; then
              NEW_VERSION="v1.0.0"
            elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
              MAJOR=$(echo $CURRENT_VERSION | cut -d'v' -f2 | cut -d'.' -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="v$MAJOR.$NEW_MINOR.0"
            else
              MAJOR=$(echo $CURRENT_VERSION | cut -d'v' -f2 | cut -d'.' -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
              PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
            fi
            
            echo "New version: $NEW_VERSION"
            
            git tag $NEW_VERSION
            git push origin $NEW_VERSION
            
            echo "SHOULD_BUILD=true" >> $GITHUB_ENV
            echo "DOCKER_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "No release needed for this commit"
            echo "SHOULD_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Set final output
        id: final_output
        run: |
          echo "should_build_docker=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "docker_version=${DOCKER_VERSION:-none}" >> $GITHUB_OUTPUT
          echo "DEBUG: should_build_docker=$SHOULD_BUILD"
          echo "DEBUG: docker_version=${DOCKER_VERSION:-none}"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: check-and-release
    if: needs.check-and-release.outputs.should_build_docker == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Debug outputs
        run: |
          echo "Should build: ${{ needs.check-and-release.outputs.should_build_docker }}"
          echo "Docker version: ${{ needs.check-and-release.outputs.docker_version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Determine version tag
        id: version_tag
        run: |
          if [ "${{ needs.check-and-release.outputs.docker_version }}" != "none" ]; then
            echo "tag=${{ needs.check-and-release.outputs.docker_version }}" >> $GITHUB_OUTPUT
          else
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
          echo "Using tag: $tag"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version_tag.outputs.tag }}